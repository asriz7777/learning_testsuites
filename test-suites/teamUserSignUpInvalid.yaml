---
# Note - The below property order is not important.

# Test Suite should be unique per project.
name: teamUserSignUpInvalid

# Folder path
# parent: com.company.project.feature.functional

# Optional - one or more author names
authors:
  #- Developer 1
  #- Developer 2

# Suite type - SUITE or ABSTRACT
#   ABSTRACT - is not directly executed but is injected into other suite's 'init' & 'cleanup' sections.
type: SUITE

# Optional - one or more Abstract suites
init:
  #- InitAbstractSuite1
  #- InitAbstractSuite2

# Mandatory - API endpoint path.
endpoint: /users/team-sign-up

# Mandatory - Represents the API http method (GET, PUT, POST, DELETE etc)
method: POST

# Optional - What authentication to use when calling the endpoint. 'Anonymous' means no authentication is used. There is always a 'Default' auth type.
# For more advance test-cases you can create a new auth type on your env and refer it's name here. e.g. 'Admin' etc.
auth: None

# Optional Represents request headers
# Note: These two headers are automatically set ('Content-Type: application/json', 'Accept: application/json')
headers:
  #- 'Content-Type: application/json'

# One ore more test cases when using POST, PUT, & DELETE methods.
# Every test-case has unique id and a body (json) properties.
# Data-Injection in-build keywords (@Random, @RandomAlphabetic, @RandomAlphanumeric, @RandomNumeric, @Date, @RandomUUID, @Vault)

testCases:
  # invalid company
  - id: 1
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "12345678", "company": ""}'
  - id: 2
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "12345678", "company": "1"}'
  - id: 3
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "12345678", "company": "12"}'

  # invalid email
  - id: 4
    body: '{"name": "fn1 ln", "email": "", "password": "12345678", "company": "123"}'
  - id: 5
    body: '{"name": "fn1 ln", "email": "test@", "password": "12345678", "company": "123"}'
  - id: 6
    body: '{"name": "fn1 ln", "email": "test@fxlabs", "password": "12345678", "company": "123"}'
  - id: 7
    body: '{"name": "fn1 ln", "email": "test@fxlabs_io", "password": "12345678", "company": "123"}'

  # invalid password
  - id: 8
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "", "company": "123"}'
  - id: 9
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "1", "company": "123"}'
  - id: 10
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "12", "company": "123"}'
  - id: 11
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "123", "company": "123"}'
  - id: 12
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "1234", "company": "123"}'
  - id: 13
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "12345", "company": "123"}'
  - id: 14
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "123456", "company": "123"}'
  - id: 15
    body: '{"name": "fn1 ln", "email": "test@fxlabs.io", "password": "1234567", "company": "123"}'


# Assertions - One or more.
# All needs to be true for the test-case to pass.
# In-build variables (@Request, @StatusCode, @ResponseHeaders, @Response, @NULL, @EMPTY, @ResponseTime, @ResponseSize, @Faker etc)
# Assertions support || (OR) operator e.g. @StatusCode != 200 || @Response.errors == true
# Refer to Faker documentation https://faker.readthedocs.io/en/master/
# Refer to JSONPath documentation https://github.com/json-path/JsonPath
# Refer to FX documentation https://fxlabs.io/documentation/
# Refer to Vault page https://cloud.fxlabs.io/#/app/vault

## Comparison keywords ("- ==", "==IgnoreCase", "!=", ">", "<", ">=", "<=", "=~", "!=~", "startsWith", "startsWithIgnoreCase", "endsWith", "endsWithIgnoreCase")

## Transformation keywords (trim, trimToNull, trimToEmpty, truncate, strip, indexOf, indexOfIgnoreCase, lastIndexOf, left, right, substringBefore, substringAfter, substringBeforeLast, substringAfterLast
  # substringBetween, removeStart, removeStartIgnoreCase, removeEnd, removeEndIgnoreCase, remove, removeIgnoreCase, removeAll, removeFirst, removePattern, chomp, chop, repeat, rightPad, leftPad, upperCase, lowerCase, capitalize, uncapitalize, reverse)

assertions:
  - "@StatusCode == 200"
  - "@Response.errors == true"
  #- "@ResponseSize <= 1024"
  #- "@Response.errors == false || @Response.data.errors == false"
  #- "@Response.data.name == @Request.name"
  #- "@Response.data.url == @Request.url"
  #- "@Response.data.account.id == @Request.account.id" # JSONPath example


# Optional - Executes one or more abstract suites per request or per suite.
cleanup:
  #- CleanUpAbstract1
  #- CleanUpAbstract2

# This attribute is used for auto bug triage and filing (Major, Critical, Minor etc)
severity: Major

# Test category e.g. (Functional, SQL_Injection etc)
category: Functional

# Jobs can filter test-suites based on the tags.
tags:
- V2

# Optional policies
policies:
  logger: DEBUG # DEBUG | ERROR
  #repeatOnFailure: 0
  #repeat: 0
  #repeatDelay: 3000
  #timeoutSeconds: 5
  # Control if init scripts are executed once for test-case or once per script (Request, Suite)
  #initExec: Request
  # Control if cleanup scripts are executed once for test-case or once per script (Request, Suite)
  #cleanupExec: Request
